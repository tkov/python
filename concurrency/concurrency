Concurrency
===========

- definition: "simultaneous occurrence"

- threads, tasks or processes are sequences of instructions that run in order;
  a "train of thought", if you'd like

- when it comes down to it, ONLY multiprocessing runs threads/tasks/processes at the same time

- 'Threading' and 'asyncio' both run on a single processor, and thus run one task at a time

	-- Threading uses PRE-EMPTIVE MULTITASKING: where the OS knows about each thread and
			can interrupt it at any time to start running another thread

	-- asyncio uses CO-OPERATIVE MULTITASKING: the tasks must cooperate by "announcing" when they
			are ready to be switched out



Parallelism
===========

- with 'multiprocessing', Python creates new processes

- a process can be thought as a completely different program: each process runs its own Python
  interpreter

- because they are different processes, each "train of thought" can be run on a different core;
  thus they can be run at the same time



An Overview...

	Concurrency Type			Switching Decision			Num of Proc
	-------------------------------------------------------------------
	Pre-emptive					The OS decides to switch 	     1
	(threading)

	Co-operative				The tasks decide when to         1 	
	(asyncio)                   give up control

	Multiprocessing 			The processes all run at       Many
	(multiprocessing)			the same time on different 
								processors



...


How to Speed Up an I/O Bound Program
------------------------------------

- example: downloading content over the network


Synchronous Version

	
	import requests
	import time


	def download_site(url, session):
		with session.get(url) as response:
			print(f"Read {len(response.content)} from {url}")


	def download_all_sites(sites):
		with requests.Session() as session:
			for url in sites:
				download_site(url, session) 


	if __name__ == "__main__":
		sites = [
			"https://www.jython.org",
			"http://olympus.realpyhton.org/dice",
			] * 80

		start_time = time.time()
		download_all_sites(sites)
		end_time = time.time()

		duration = end_time - start_time
		print(f"Downloaded {len(sites)} in {duration} seconds")



Threading Version
~~~~~~~~~~~~~~~~~

	import concurrent.futures
	import requests
	import threading
	import time

	thread_local = threading.local()

	def get_session():
		if not hasattr(thread_local, "session"):
			thread_local.session = requests.Session()

		return thread_local.session

	